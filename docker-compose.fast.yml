# LEAN Trading Bot Stack - Fast Deployment
# Uses lightweight containers for quick setup
# Author: @szarastrefa

version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lean_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-simple.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lean_network

  # Flask Web Application
  web:
    image: python:3.11-slim
    container_name: lean_web
    working_dir: /app
    volumes:
      - ./webui/backend:/app:ro
      - ./data:/data
      - ./logs:/logs
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=${FLASK_ENV:-production}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-lean_trading}
      - POSTGRES_USER=${POSTGRES_USER:-leanuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
    command: >
      sh -c "pip install --no-cache-dir flask flask-cors requests pandas psycopg2-binary redis &&
             python -c 'import time; time.sleep(5)' &&
             python app.py || python -m http.server 5000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lean_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lean_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lean_trading}
      POSTGRES_USER: ${POSTGRES_USER:-leanuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-leanuser} -d ${POSTGRES_DB:-lean_trading}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - lean_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lean_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lean_network

  # LEAN Engine (Lightweight)
  lean:
    image: python:3.11-slim
    container_name: lean_engine
    working_dir: /opt/lean
    volumes:
      - ./data:/data
      - ./output:/output
      - ./docker/lean/strategies:/strategies:ro
      - ./docker/lean/config:/config:ro
    environment:
      - LEAN_MODE=LIVE
      - LEAN_ENVIRONMENT=lean_live
      - QC_API_ACCESS_TOKEN=${QC_API_ACCESS_TOKEN}
      - QC_USER_ID=${QC_USER_ID}
    command: >
      sh -c "pip install --no-cache-dir pandas numpy requests &&
             echo 'LEAN Engine placeholder - configure with real strategies' &&
             python -c 'import time; [time.sleep(60) for _ in iter(int, 1)]'"
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - lean_network

  # LocalTunnel Service (Optional)
  tunnel:
    image: node:18-alpine
    container_name: lean_tunnel
    command: >
      sh -c "npm install -g localtunnel &&
             lt --port 80 --host nginx --subdomain ${TUNNEL_SUBDOMAIN:-lean-bot} --print-requests"
    depends_on:
      - nginx
    restart: unless-stopped
    profiles:
      - tunnel
    networks:
      - lean_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  lean_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
