version: '3.8'

services:
  # QuantConnect LEAN Engine
  lean-engine:
    build:
      context: ./docker/lean
      dockerfile: Dockerfile
    container_name: lean-engine
    restart: unless-stopped
    environment:
      - LEAN_ENVIRONMENT=LIVE
      - LOG_HANDLER=ConsoleLogHandler
      - JOB_QUEUE_HANDLER=JobQueue
      - API_ACCESS_TOKEN=${QC_API_ACCESS_TOKEN}
      - API_USER_ID=${QC_USER_ID}
    volumes:
      - ./lean/config:/opt/lean/config
      - ./lean/strategies:/opt/lean/strategies
      - ./data:/opt/lean/data
      - ./results:/opt/lean/results
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis

  # Web UI Backend (Flask)
  webui-backend:
    build:
      context: ./webui/backend
      dockerfile: Dockerfile
    container_name: webui-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${FLASK_SECRET_KEY}
      - LEAN_API_URL=http://lean-engine:8080
    volumes:
      - ./webui/backend:/app
      - ./models:/app/models
    ports:
      - "5000:5000"
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis
      - lean-engine

  # Web UI Frontend (React)
  webui-frontend:
    build:
      context: ./webui/frontend
      dockerfile: Dockerfile
    container_name: webui-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    ports:
      - "3000:3000"
    networks:
      - trading-network
    depends_on:
      - webui-backend

  # ML Runtime Service
  ml-runtime:
    build:
      context: ./docker/ml-runtime
      dockerfile: Dockerfile
    container_name: ml-runtime
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - MODEL_STORAGE_PATH=/app/models
    volumes:
      - ./models:/app/models
    ports:
      - "8888:8888"  # Jupyter Lab
      - "5001:5001"  # ML API
    networks:
      - trading-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - trading-network
    depends_on:
      - webui-frontend
      - webui-backend

  # Tunnel Service (Optional - wybierany w install.sh)
  tunnel-service:
    build:
      context: ./docker/tunnel
      dockerfile: Dockerfile
    container_name: tunnel-service
    restart: unless-stopped
    environment:
      - TUNNEL_TYPE=${TUNNEL_TYPE:-none}
      - NGROK_AUTH_TOKEN=${NGROK_AUTH_TOKEN}
      - LOCALTUNNEL_SUBDOMAIN=${LOCALTUNNEL_SUBDOMAIN}
      - CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    volumes:
      - ./docker/tunnel/config:/config
    network_mode: host  # Potrzebne dla niekt√≥rych tuneli
    profiles:
      - tunnel

volumes:
  postgres_data:
  redis_data:

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16